"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
/**
 * Finds the version for the currently running CLI.
 *
 * @param toolbox Currently running toolbox.
 * @returns Version as a string.
 */
function getVersion(toolbox) {
    var directory = toolbox.meta.src;
    var filesystem = toolbox.filesystem;
    if (!directory)
        throw new Error('getVersion: Unknown CLI version (no src folder found)');
    // go at most 5 directories up to find the package.json
    for (var i = 0; i < 5; i += 1) {
        var pkg = filesystem.path(directory, 'package.json');
        // if we find a package.json, we're done -- read the version and return it
        if (filesystem.exists(pkg) === 'file')
            return filesystem.read(pkg, 'json').version;
        // if we reach the git repo or root, we can't determine the version -- this is where we bail
        var git = filesystem.path(directory, '.git');
        var root = filesystem.path('/');
        if (directory === root || filesystem.exists(git) === 'dir')
            break;
        // go up another directory
        directory = filesystem.path(directory, '..');
    }
    throw new Error("getVersion: Unknown CLI version (no package.json found in " + directory);
}
exports.getVersion = getVersion;
/**
 * Gets the list of plugins.
 *
 * @param toolbox The toolbox
 * @param plugins The plugins holding the commands
 * @param commandRoot Optional, only show commands with this root
 * @return List of plugins.
 */
function commandInfo(toolbox, commandRoot) {
    return toolbox.runtime.commands
        .filter(function (c) { return !c.hidden; })
        .filter(function (c) { return !commandRoot || utils_1.equals(c.commandPath.slice(0, commandRoot.length), commandRoot); })
        .map(function (command) {
        var alias = command.hasAlias() ? "(" + command.aliases.join(', ') + ")" : '';
        var commandPath = command.name ? command.commandPath.slice(0, -1).concat(command.name) : command.commandPath;
        return [commandPath.join(' ') + " " + alias, utils_1.replace('$BRAND', toolbox.runtime.brand, command.description || '-')];
    });
}
exports.commandInfo = commandInfo;
//# sourceMappingURL=meta-tools.js.map